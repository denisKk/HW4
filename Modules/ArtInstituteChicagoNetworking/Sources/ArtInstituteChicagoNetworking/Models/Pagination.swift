//
// Pagination.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Pagination: Codable, JSONEncodable, Hashable {

    public var total: Int?
    public var limit: Int?
    public var offset: Int?
    public var totalPages: Int?
    public var currentPage: Int?
    public var prevUrl: String?
    public var nextUrl: String?

    public init(total: Int? = nil, limit: Int? = nil, offset: Int? = nil, totalPages: Int? = nil, currentPage: Int? = nil, prevUrl: String? = nil, nextUrl: String? = nil) {
        self.total = total
        self.limit = limit
        self.offset = offset
        self.totalPages = totalPages
        self.currentPage = currentPage
        self.prevUrl = prevUrl
        self.nextUrl = nextUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case total
        case limit
        case offset
        case totalPages = "total_pages"
        case currentPage = "current_page"
        case prevUrl = "prev_url"
        case nextUrl = "next_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(totalPages, forKey: .totalPages)
        try container.encodeIfPresent(currentPage, forKey: .currentPage)
        try container.encodeIfPresent(prevUrl, forKey: .prevUrl)
        try container.encodeIfPresent(nextUrl, forKey: .nextUrl)
    }
}

