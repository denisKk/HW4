//
// Artwork.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Artwork: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var title: String?
    public var description: String?
    public var creationDate: String?
    public var people: [ArtworkPeopleInner]?
    public var technique: String?
    public var dated: String?
    public var primaryimageurl: String?
    public var images: [ArtworkImagesInner]?

    public init(id: Int? = nil, title: String? = nil, description: String? = nil, creationDate: String? = nil, people: [ArtworkPeopleInner]? = nil, technique: String? = nil, dated: String? = nil, primaryimageurl: String? = nil, images: [ArtworkImagesInner]? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.creationDate = creationDate
        self.people = people
        self.technique = technique
        self.dated = dated
        self.primaryimageurl = primaryimageurl
        self.images = images
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case description
        case creationDate = "creation_date"
        case people
        case technique
        case dated
        case primaryimageurl
        case images
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(people, forKey: .people)
        try container.encodeIfPresent(technique, forKey: .technique)
        try container.encodeIfPresent(dated, forKey: .dated)
        try container.encodeIfPresent(primaryimageurl, forKey: .primaryimageurl)
        try container.encodeIfPresent(images, forKey: .images)
    }
}

